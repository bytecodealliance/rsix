# Test a selection of projects which depend on rustix.

name: Test rustix's users

on: workflow_dispatch

jobs:
  async-io:
    name: async-io ported to rustix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: sunfishcode/async-io
        path: async-io
    - run: cd async-io && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd async-io && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd async-io && cargo test

  cap-std:
    name: cap-std
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: bytecodealliance/cap-std
        path: cap-std
    - run: cd cap-std && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd cap-std && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd cap-std && cargo test

  cargo:
    name: cargo ported to rustix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: sunfishcode/cargo
        path: cargo
        ref: rustix
    - run: cd cargo && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd cargo && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd cargo && cargo test --workspace
      # Cargo cross tests require extra build dependencies.
      env:
        CFG_DISABLE_CROSS_TESTS: 1

  memfd-rs:
    name: memfd-rs ported to rustix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: sunfishcode/memfd-rs
        path: memfd-rs
    - run: cd memfd-rs && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd memfd-rs && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd memfd-rs && cargo test

  tempfile:
    name: tempfile ported to rustix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: sunfishcode/tempfile
        path: tempfile
    - run: cd tempfile && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd tempfile && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd tempfile && cargo test

  fd-lock:
    name: fd-lock
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: yoshuawuyts/fd-lock
        path: fd-lock
    # fd-lock currently uses rustix 0.32.
    - run: sed -i 's/^version = "\([[:digit:].-]*\)"$/version = "0.32.0"/' Cargo.toml
    - run: cd fd-lock && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd fd-lock && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd fd-lock && cargo test

  wasmtime:
    name: wasmtime
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: bytecodealliance/wasmtime
        path: wasmtime
        submodules: true
    - run: rustup target add wasm32-wasi
    - run: cd wasmtime && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd wasmtime && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd wasmtime && cargo test

  nameless:
    name: nameless
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: sunfishcode/nameless
        path: nameless
    - run: cd nameless && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd nameless && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd nameless && cargo test

  cap-std-ext:
    name: cap-std-ext
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: cgwalters/cap-std-ext
        path: cap-std-ext
    - run: cd cap-std-ext && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd cap-std-ext && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd cap-std-ext && cargo test

  ostree-rs-ext:
    name: ostree-rs-ext
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: ostreedev/ostree-rs-ext
        path: ostree-rs-ext
    - run: sudo apt-get update
    - run: sudo apt-get install -y libostree-dev
    - run: cd ostree-rs-ext && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd ostree-rs-ext && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd ostree-rs-ext && cargo test

  dbus-rs:
    name: dbus-rs ported to rustix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: sunfishcode/dbus-rs
        path: dbus-rs
    - run: sudo apt-get update
    - run: sudo apt-get install -y libdbus-1-dev
    - run: cd dbus-rs && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd dbus-rs && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd dbus-rs && env DBUS_SESSION_BUS_ADDRESS=`dbus-daemon --session --print-address --fork` cargo test --workspace

  mustang:
    name: mustang
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [nightly]
        include:
          - build: nightly
            os: ubuntu-latest
            rust: nightly
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: sunfishcode/mustang
        path: mustang
    - run: rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
    - run: cd mustang && echo '[patch.crates-io]' >> Cargo.toml
    - run: cd mustang && echo 'rustix = { path = ".." }' >> Cargo.toml
    - run: cd mustang && sed -i 's/fn concurrent_recursive_mkdir()/#[ignore]\rfn concurrent_recursive_mkdir()/' tests/fs.rs
    # Use jobs=1 to hopefully avoid apparently oversubscribing the runner.
    - run: cd mustang && cargo test --target=specs/x86_64-mustang-linux-gnu.json -Zbuild-std --jobs=1

  std:
    name: std ported to rustix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [nightly]
        include:
          - build: nightly
            os: ubuntu-latest
            rust: nightly
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - uses: actions/checkout@v2
      with:
        repository: sunfishcode/rust
        path: rust
        ref: rustix
    # Download a pre-built LLVM instead of building it from source.
    - run: cd rust && echo "[llvm]" >> config.toml
    - run: cd rust && echo "download-ci-llvm = true" >> config.toml
    - run: cd rust && sed -i 's/\<git = "https:\/\/github\.com\/bytecodealliance\/rustix", branch = "rustc-dep-of-std"/path = "..\/..\/.."/' library/std/Cargo.toml
    - run: cd rust && ./x.py test library/std --stage=0
      # See <https://github.com/bytecodealliance/rustix/issues/76#issuecomment-962196433>
      env:
        RUSTFLAGS: --cfg=linux_raw --cfg=asm --cfg=rustc_attrs
